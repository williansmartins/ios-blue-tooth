# Define o nome do workflow que aparecerá no Codemagic
workflows:
  ios-app-build:
    name: Build iOS App with Expo (RN)

    # Tipo de instância para o build. mac_mini_m2 é recomendado para iOS.
    instance_type: mac_mini_m2

    # **** ESTA SEÇÃO 'environment:' É CRUCIAL PARA INJETAR SEU TOKEN SEGURO ****
    environment:
      # Use esta seção para carregar o grupo de variáveis 'teste'
      groups:
        - teste # Nome do seu grupo de variáveis de ambiente no Codemagic UI

    # Seções de scripts que definem os passos do build
    scripts:
      # Adicione este comando para navegar para o diretório raiz do seu repositório
      - name: Navegar para o diretório do projeto
        script: |
          echo "Navegando para o diretório do projeto: $CM_BUILD_DIR"
          cd $CM_BUILD_DIR
          echo "Diretório atual: $(pwd)" # Para depuração, mostra o diretório atual

      # 1. Configurar Node.js
      - name: Configurar Node.js (LTS)
        script: |
          echo "********** INICIANDO CONFIGURAÇÃO DO NODE.JS **********"
          echo "Verificando se 'n' está instalado e instalando se necessário..."
          npm install -g n || { echo "Falha ao instalar 'n'. Verifique permissões ou conectividade."; exit 1; }
          
          echo "Tentando instalar a versão LTS do Node.js usando 'n'..."
          n lts || { echo "Falha ao instalar Node.js LTS usando 'n'. Verifique logs acima para detalhes."; exit 1; }
          
          echo "Verificando versões instaladas..."
          node -v
          npm -v
          echo "********** CONFIGURAÇÃO DO NODE.JS CONCLUÍDA **********"

      # 2. Instalar dependências do projeto (npm ou yarn)
      - name: Instalar dependências do projeto
        script: |
          echo "Instalando dependências do projeto..."
          npm install # Ou 'yarn install' se você usa yarn no seu projeto
          echo "Dependências instaladas."

      # 3. Configurar EAS CLI (Login automático via EXPO_TOKEN)
      - name: Configurar EAS CLI
        script: |
          echo "Configurando EAS CLI..."
          npm install -g eas-cli || { echo "Falha ao instalar eas-cli."; exit 1; } # Garante que o EAS CLI está instalado
          
          # Depuração: Verificar se a variável EXPO_TOKEN está presente no ambiente
          if [ -z "$EXPO_TOKEN" ]; then
            echo "ERRO CRÍTICO: Variável EXPO_TOKEN não encontrada no ambiente de build. Verifique as configurações do Codemagic!"
            exit 1
          else
            echo "Variável EXPO_TOKEN detectada (valor oculto por segurança). EAS CLI deve usá-la automaticamente."
          fi

          echo "Configuração do EAS CLI concluída. Autenticação esperada via EXPO_TOKEN."

      # 4. Executar o build iOS com EAS CLI
      - name: Criar Build iOS
        script: |
          echo "Iniciando build iOS com EAS CLI..."
          eas build -p ios --profile production --non-interactive || { echo "Falha ao iniciar o build EAS CLI."; exit 1; }
          echo "Build iOS iniciado. O artefato .ipa será gerado pelo EAS."

    # Define onde o Codemagic deve procurar os artefatos gerados
    artifacts:
      - $CM_BUILD_DIR/**/*.ipa 
      - /tmp/eas-build-archive/*.ipa
      - ~/.npm/_logs/*.log

    # Notificações (opcional)
    # notifications:
    #   email:
    #     recipients:
    #       - seu_email@exemplo.com
    #     success:
    #       - email
    #     failure:
    #       - email