# Define o nome do workflow que aparecerá no Codemagic
workflows:
  ios-app-build:
    name: Build iOS App with Expo (RN)

    # Tipo de instância para o build. mac_mini_m2 é recomendado para iOS.
    instance_type: mac_mini_m2

    # **** REMOVA TODA A SEÇÃO 'environment:' SE ELA ESTIVER VAZIA ****
    # **** Ou se a única coisa que sobrou era a linha 'EXPO_TOKEN: $EXPO_TOKEN' ****
    #
    # Se você tiver OUTRAS variáveis de ambiente NÃO-SEGURAS que quer definir aqui,
    # ou se precisar de alguma configuração de ambiente específica (que não seja o EXPO_TOKEN),
    # então a seção 'environment:' deve existir e conter APENAS essas outras variáveis.
    # Exemplo (se você tivesse uma variável de API_KEY não segura):
    # environment:
    #   MY_API_KEY: "abc123def456"

    # Seções de scripts que definem os passos do build
    scripts:
      # 1. Configurar Node.js
      - name: Configurar Node.js (LTS)
        script: |
          echo "********** INICIANDO CONFIGURAÇÃO DO NODE.JS **********"
          echo "Verificando se 'n' está instalado e instalando se necessário..."
          npm install -g n || { echo "Falha ao instalar 'n'. Verifique permissões ou conectividade."; exit 1; }
          
          echo "Tentando instalar a versão LTS do Node.js usando 'n'..."
          n lts || { echo "Falha ao instalar Node.js LTS usando 'n'. Verifique logs acima para detalhes."; exit 1; }
          
          echo "Verificando versões instaladas..."
          node -v
          npm -v
          echo "********** CONFIGURAÇÃO DO NODE.JS CONCLUÍDA **********"

      # 2. Instalar dependências do projeto (npm ou yarn)
      - name: Instalar dependências do projeto
        script: |
          echo "Instalando dependências do projeto..."
          npm install # Ou 'yarn install' se você usa yarn no seu projeto
          echo "Dependências instaladas."

      # 3. Configurar EAS CLI e fazer login (AGORA VAI PEGAR O TOKEN AUTOMATICAMENTE DO AMBIENTE)
      - name: Fazer login no EAS CLI
        script: |
          echo "Configurando e fazendo login no EAS CLI..."
          npm install -g eas-cli # Garante que o EAS CLI está instalado
          
          # O EAS CLI AUTOMATICAMENTE PROCURA POR $EXPO_TOKEN NO AMBIENTE.
          # Não é necessário o 'eas login --token $EXPO_TOKEN' se o EXPO_TOKEN já está lá.
          # No entanto, se quiser ser explícito ou depurar, pode manter.
          # Para um ambiente CI/CD, basta que o $EXPO_TOKEN esteja no ambiente.
          # Se o 'eas build' abaixo reclamar, podemos adicionar um 'eas login' explícito aqui.
          # Por enquanto, vamos confiar que o build vai pegar o token automaticamente.
          
          echo "Login no EAS CLI concluído (assumindo EXPO_TOKEN injetado)."

      # 4. Executar o build iOS com EAS CLI
      - name: Criar Build iOS
        script: |
          echo "Iniciando build iOS com EAS CLI..."
          # A autenticação já deve ter ocorrido via $EXPO_TOKEN no ambiente, ou pelo login acima.
          eas build -p ios --profile production --non-interactive || { echo "Falha ao iniciar o build EAS CLI."; exit 1; }
          echo "Build iOS iniciado. O artefato .ipa será gerado pelo EAS."

    # Define onde o Codemagic deve procurar os artefatos gerados
    artifacts:
      - $CM_BUILD_DIR/**/*.ipa 
      - /tmp/eas-build-archive/*.ipa
      - ~/.npm/_logs/*.log

    # Notificações (opcional)
    # notifications:
    #   email:
    #     recipients:
    #       - seu_email@exemplo.com
    #     success:
    #       - email
    #     failure:
    #       - email